name: "Build"
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:  
  build:      
    name: Build & Release 
    permissions: write-all
    runs-on: macos-latest 
    steps:
      # 1. Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Setup Flutter
      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 'stable' # Use 'stable' instead of a specific version

      # 3. Install CocoaPods Dependencies
      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          pod install --project-directory=ios/

      # 4. Install Dependencies
      - name: Install Dependencies
        run: flutter pub get

      # 5. Build iOS App without Codesign
      - name: Build iOS App
        run: flutter build ios --release --no-codesign

      # 6. Archive the iOS Build
      - name: Archive iOS Build
        run: |
          xcodebuild -scheme Runner -archivePath build/ios/Runner.xcarchive archive

      # 7. Export IPA Manually
      - name: Create IPA
        run: |
          mkdir -p build/ios/ipa
          xcodebuild -exportArchive \
            -archivePath build/ios/Runner.xcarchive \
            -exportOptionsPlist ios/ExportOptions.plist \
            -exportPath build/ios/ipa/

      # 8. List IPA Directory for Debugging
      - name: List IPA Directory
        run: ls -R build/ios/ipa/

      # 9. Compress Archives and IPAs (Optional)
      - name: Compress Archives and IPAs
        run: |
          cd build
          tar -czf ios_build.tar.gz ios/

      # 10. Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Releases
          path: build/ios/ipa/*.ipa
          # If you prefer to upload the tar.gz instead, uncomment the below line and comment the above line
          # path: build/ios_build.tar.gz

      # 11. Extract Version
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

      # 12. Check if Tag Exists
      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      # 13. Modify Tag if it Exists
      - name: Modify Tag
        if: env.TAG_EXISTS == 'true'
        id: modify_tag
        run: |
          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV

      # 14. Create Release
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/ios/ipa/*.ipa"
          tag: v${{ env.VERSION }}
          # token: ${{ secrets.GITHUB_TOKEN }}
