name: "Build"
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:  
  build:      
    name: Build & Release 
    permissions: write-all
    runs-on: macos-latest 
    steps:
      # 1. Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Setup Java
      - name: Set Up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'oracle'
          java-version: '17'

      # 3. Setup Flutter
      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.2'
      - run: |
          git config --global --add safe.directory /opt/hostedtoolcache/flutter/stable-3.22.2-x64
      # architecture: 'x64'

      - name: Decode API keys
        run: |
          echo "${{ secrets.API_KEYS }}" | base64 --decode > lib/constants/api_keys.dart

      # 4. Install Dependencies
      - name: Install Dependencies
        run: flutter pub get

      # 5. Setup Keystore
      - name: Decode android Keys
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > android/app/keystore.jks
          echo "${{ secrets.ANDROID_KEYPROPS }}" | base64 --decode > android/key.properties

      # 6. Building APK
      - name: Build APK
        run: flutter build apk --release

      # 7. Building App Bundle (aab)
      # - name: Build App Bundle
      #   run: flutter build appbundle

      # 5. Build iOS App without Codesign
      - name: Build iOS App
        run: flutter build ios --release --no-codesign

      # 9. Create IPA
      - name: Create IPA
        run: |
          mkdir -p Payload
          cp -r build/ios/Release-iphoneos/Runner.app Payload/
          zip -r Runner.ipa Payload
          mv Runner.ipa build/ios/Runner.ipa

      # 9. Compress Archives and IPAs (Optional)
      - name: Compress Archives and IPAs
        run: |
          cd build
          tar -czf ios_build.tar.gz ios/

      # 10. Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Releases
          path: |
            build/ios_build.tar.gz
            build/app/outputs/flutter-apk/app-release.apk
          # build/app/outputs/bundle/release/app-release.aab

      # 11. Extract Version
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

      # 12. Check if Tag Exists
      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      # 13. Modify Tag if it Exists
      - name: Modify Tag
        if: env.TAG_EXISTS == 'true'
        id: modify_tag
        run: |
          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV

      # 14. Create Release
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/ios_build.tar.gz, build/app/outputs/flutter-apk/app-release.apk"
          tag: v${{ env.VERSION }}
          # token: ${{ secrets.GITHUB_TOKEN }}